ID Generators
--------------
The hibernate framework has provided different types of id generators insupport of generating the keys with which the data will be persisted into the database.
	
The ID Generators are used while performing the save()/persist() operation only. All the 11 ID generators provided aspart of the hibernate framework are deprecated and hibernate also supports only the JPA ID Generators only.
	
These ID Generators are nothing but java classes itself	that contains logic for computing/generating the ID based on different strategies. These Generators are invoked internally by the Session or EntityManager itself when we perform save()/persist() operation, we only need to tell for which entity class, what ID generator should be used for generating the ID.
	
There are 4 ID Generators provided by the Jpa api
1. AUTO
2. IDENTITY
3. SEQUENCE
4. TABLE

2. IDENTITY generator
There are few databases like ms-sql server and mysql server that supports generation of the primary key columns automatically through identity types, auto increment columns.
while defining the table itself we can mark the primary key column to be generated with value automatically by making the column as (AI) auto increment (mysql) or identity (mssql server). So that database itself will generate the id and persist the record of data into that table.
These ways of generating the key column values are safe and will not result into any inconsistency in a multi-threaded/concurrent env as well

advantages:-
	1. works in all the environments like single-threaded, multi-threaded/concurrent environments or clustered env
dis-advantage:-
	1. supported by only few databases for eg.. only mysql and mssql server databases supports identity or autoincrement column types
	2. works only for integer columns
	
if we understand above the ID is generated by database itself when we mark the columnType as (AI) or (IDENTITY) in table. So what is the role of IDENTITY generator here?
The IDENTITY generator will not generate the ID, here the database itself generates the ID, but the IDENITTY generator fetches the id generated by the database during save()/persist() operation and returns to session or entityManager 

Mapping File approach
---------------------
class Product {
	int productNo;
	String productName;	
}

Product.hbm.xml
---------------
<hibernate-mapping package="com.idgen.entities">
	<class name="Product" table="product">
		<id name="productNo" column="product_no">
			<generator class="identity"/>
		</id>
		<property name="productName" column="product_nm"/>
	</class>
</hibernate-mapping>

Annotation
----------
@Entity
@Table(name="product")
class Product {
	@Id
	@Column(name="product_no")
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	int productNo;
	
	@Column(name="product_nm")
	String productName;	
}

2. SEQUENCE
The SEQUENCE id generator is supported by oracle database. sequence is an data structure supported by oracle database using which we can generate sequence nos uniquely that can be used as keys in storing the data into the database tables



















	
	






























	

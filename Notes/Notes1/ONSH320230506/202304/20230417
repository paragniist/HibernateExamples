1. entity class
entity classes are the class written representing the structure of the database table
	
class Branch implements Serializable {
	private int branchNo;
	private String branchName;
	private String ifscCode;
	private String location;
	private int zipCode;
	private String contactNo;
	
	// accessor methods
	// equals() and hashCode()
	// toString()
}	

#2. To let the hibernate map the records of data between database table and the entity class, we need to provide the necessary mapping information by writing hibernate mapping file
Few points about mappingFile:
1. The name of the mappingFile should be same as the entity classname to quickly identify the mapping for a given entity class
2. it is recommended to place the mappingFile under the same package of the entity class to quickly locate it
3. The name of the mappingFile should be written with an extension of *.hbm.xml (even though .hbm is optional) to differentiate the other xml files from hibernate mappingFile
4. within an mappingFile we can define mapping information for multiple entity classes as well by writing the <class/> tag several times per each entity class as shown below.
	
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "hibernate-mapping.dtd">
<hibernate-mapping package="com.fhe.entities">
	<class name="Branch" table="branch">
	</class>
	<class name="Account" table="account">
	</class>
</hibernate-mapping>

but it is always recommended to write one mappingFile per one entity class to easily manage the mapping information

5. per each entity class the id property or primary key column on the underlying database is mandatory, otherwise we cannot manage performing persistence operations on that table using hibernate framework

6. while mapping the entity class, we can attach database table and their column information also as shown below

com/she/entities/
|-Branch.hbm.xml

<?xml version="1.0" encoding="utf-8">
<hibernate-mapping package="com.she.entities">
	<class name="Branch" table="branch">
		<id name="branchNo" type="int">
			<column name="branch_no" sql-type="INTEGER" not-null="true" unique="true"/>
		</id>
		<property name="branchName" type="java.lang.String">
			<column name="branch_nm" sql-type="VARCHAR2" length="50" not-null="true" />
		</property>
		<property name="ifscCode" type="java.lang.String">
			<column name="ifsc_code" sql-type="VARCHAR2" length="40" not-null="true"/>
		</property>
		<property name="location" type="java.lang.String">
			<column name="location" sql-type="VARCHAR2" length="10" not-null="true"/>
		</property>
		<property name="zipCode" type="java.lang.String">
			<column name="zipcode" sql-type="VARCHAR2" length="10" not-null="true"/>
		</property>
		<property name="contactNo" type="java.lang.String">
			<column name="contact_no" sql-type="VARCHAR2" length="20" not-null="true"/>
		</property>
	</class>
</hibernate-mapping>

6.1 will the hibernate validates the mapping information we defined in mappingFile against the database table?
the mapping information will not be validated against the tables during the runtime while performing the persistence operation, because it impacts the performance of the application. We just only need to validate whether the mapping information is accurate against the tables once before/at the start of the application, it shouldnot be done at runtime

For that hibernate has provided an SchemaValidator tool which we discuss at later point of time.
	
6.2 if the column types or database information is optional to be written in mappingfile, why is hibernate allowing us to write it?
	
team of developers (project)
	-> sourcecode
		-> begin working on the project 
			|- install database (mysql server)
			|- schema (tables)
we can quickly create tables out of the mapping information we have using SchemaExport tool provided by hibernate, so that develper can have jump start experience in working on hibernate applications

7. We need to write hibernate configuration information defining the database information, mapping information describing what entity classes are there in our application and what their relevant tables into which those are mapped.
7.1 by default we need to write the hibernate configuration file with name as : "hibernate.cfg.xml" and should be placed under the classpath of our application

hibernate.cfg.xml
------------------
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-configuration PUBLIC "hibernate-configuration.dtd">
<hibernate-configuration>
	<session-factory>
		<property name="connection.driver_class">com.mysql.cj.jdbc.Driver</property>
		<property name="connection.url">jdbc:mysql://localhost:3306/hibdb</property>
		<property name="connection.username">root</property>
		<property name="connection.password">welcome1</property>
		
		<property name="show_sql">true</property>
		<property name="dialect">org.hibernate.dialect.MySQLDialect</property>
		
		<mapping resource="com/she/entities/Branch.hbm.xml"/>	
	</session-factory>
</hibernate-configuration>


8. Session
Instead of we writing boiler-plate logic in creating a connection, sql query and preparedStatement by substituting parameters and executing the query and convert into object using GenericMapper hibernate has provided an intelligent class called "Session"

The Session class object inorder to perform database operation it requires Connection and Mapping information. here the mappingInformation is needed for Session object:
	8.1 to generate the sql query by passing it to the Dialect
	8.2 for converting the record into object using GenericMapper it requires Mapping information
	
upon calling session.get(Branch.class, 2) what happens:

class Session {
	private Connection connection;
	private Map<Class, HibernateMapping> hibernateMappings;
	private Dialect dialect;
	
	/*
		The Session object would be created by the SessionFactory by passing
		1. Connection
		2. Mapping
		3. Dialect object
		populated into it while creating
	*/
	
	public T get(Class<T> entityClass, Object id) {
		String sqlQuery = null;
		
		hibernateMapping = hibernateMappings.get(entityClass);
		sqlQuery = dialect.generateSqlForSelectById(hibernateMapping);
		PreparedStatement pstmt = con.preparedStatement(sqlQuery);
		pstmt.setInt(1, id);
		ResultSet rs = pstmt.executeQuery();
		if(rs.next()) {
			Object obj = genericMapper.mapResultRecordToObject(rs, entityClass, hibernateMapping);
		}
		return obj;
	}	
}

How many objects of the Session we should create within an hibernate application?
per each operation we need to create one new object of the Session, since session holds the connection.
	
9. SessionFactory	
To perform the database operation we need Session object, but Session requires Connection, Mapping and Dialect. So inorder to create the object of Session we endup in writing lot of complex logic in reading the Configuration, Mapping using which instantiate Connection object, dialect and pass them as an input in creating the object of Session.
	
To avoid/abstract the complexity in creating the object of the Session, the Hibernate has provided SessionFactory. SessionFactory acts as an factory class for creating the object of Session.
	
10. Configuration	
For SessionFactory to create Connection, dialect for creating the object of Session, it requires configuration/mapping information. That is where hibernate framework has provided an class called "Configuration"
	
Configuration class object holds the hibernate.cfg.xml (configuration)	and even mapping information provided within it, using which we can create the object of SessionFactory.
Configuration class knows how to read the hibernate configuration and mapping information, so take the help of Configuration


class Test {
	public static void main(String[] args) {
		Configuration configuration = null;
		SessionFactory sessionFactory = null;
		Session session = null;
		
		try {
			configuration = new Configuration().configure();
			sessionFactory = configuration.buildSessionFactory();
			session = sessionFactory.openSession();
			
			Branch branch = session.get(Branch.class, 10);
			sop(branch);			
		}finally {
			if(session != null){ 
				session.close();
			}
			if(sessionFactory!=null){
				sessionFactory.close();
			}
		}
	}
}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	








































































	











































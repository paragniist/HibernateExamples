What is a Service?
Service is a component that provides various different functionalities. For each type of functionality we will have one Service interface defined with respective behaviours in offering the functionalites, these interfaces that are defined in offerring a specific type of functionality is called a "ServiceRole" interface.
For each ServiceRole there are multiple implementations of the Service interface, so pluggability comes through the point of interface and implementations.
	
Hibernate Framework has adopted the above pattern in plugging-in/enhancing the core aspect of the framework. Framework requires various different external resources, to make these resources pluggable and customizable hibernate has adopted the ServiceRole and implementations as defined above.
	
For each external resource/functionality that Hibernate requires has been defined as a ServiceRole interface, for which hibernate developers/framework itself has provided default implementations for these interfaces
For eg.. to perform operations in Hibernate the Session class requires "Connection" object to make the process of acquiring the Connection in Pluggable manner Hibernate has introduced ConnectionProvider interface defined with methods in grabbing/releasing connections.
	
interface ConnectionProvider {
	Connection getConnection();
	boolean closeConnection();
}
hibernate supports multiple ways acquiring Connection like in-built Connection pool support, c3p0, proxool etc. For each of these technics of grabbing Connection Hibernate has defined implementations of ConnectionProvder interface
1. JdbcConnectionProvider
2. DataSourceConnectionProvider
3. C3P0ConnectionProvider
etc
For all of the Service interfaces in Hibernate there is a base Service interface which is an marker interface and is used as a placeholder for typesafety and polymorphism.
	
The Hibernate Framework api classes are written to ServiceRole interfaces, so that those can be pluggable with different implementations

What is a ServiceRegistry?
These Services has typical characteristcs
1. Services requires lifecycle management, at the time of instantiating the Service we want to perform initialization and during the destruction of the Service we want to perform clean up activities
2. Services has dependency with others

The ServiceRegistry is introduced to host these services, manage their lifecycle and dependencies. These service registries are nothing but ioc containers of their own. There are 3 ServiceRegistries are there in Hibernate Framework
1. BootStrapServiceRegistry
2. StandardServiceRegistry
3. SessionFactoryServiceRegistry
These ServiceRegistries are related with each other Hierarchially, where the root Registry is BootStrapServiceRegistry with a child as StandardServiceRegistry and its child as SessionFactoryServiceRegistry

Each of these ServiceRegistries are associated with their respective ServiceRoles

#1. BootStrapServiceRegistry = most essential services of the hibernate framework to bootstrap it are associated here
	1.1 ClassLoaderService = Hibernate Framework internally uses its own ClassLoading mechanism in loading the Hibernate application classes. If we want to customize or plugin your ClassLoader implementations we can use ClassLoaderService	
	1.2 IntegratorService = used for integrating third-party applications into Hibernate Framework
	1.3 StrategySelector = will resolves the fqnClasses for the short-names we defined in configurations
	
hibernate.cfg.xml
-----------------
<property name="hibernate.transaction_cordinator.class">jdbc</property>

Hibernate 3.x
org.hibernate.Transaction
|-JdbcTransactionImpl
|-JtaTransactionImpl

Hibernate-4.x
|-org.hibernate.Transaction
	(spi)
	|-Jdbc2TransactionImpl
	|-JeeServerJtaTransactionImpl
	
#2. StandardServiceRegistry = Most of the commonly used Services of the HibernateFramework are hosted/associated and managed by StandardServiceRegistry. There are total 5 ServiceRoles associated to StandardServiceRegistry
1. ConnectionProvider = plugging in various Connection Pool implementations into Hibernate  Framework
2. JdbcServices = aggregator service for all Jdbc implementations
3. TransactionFactory = used for location UserTransaction from jndi registry of application server
4. JtaPlatform = managing global transactions
5. RegionFactory = 2nd level cache

hibernate.cfg.xml
<property name="hibernate.transaction_cooridinator.class">jta</property>

org.hibernate.Transaction
JdbcTransactionImpl
local
	con.commit()/con.rollback()
	
JtaTransactionImpl	
global transaction
	ut.commit();/ut.rollback(); = jee server
	
Transaction transaction = session.beginTransaction();

#3. SessionFactoryServiceRegistry = hold all the SessionFactory related Services here
There are 2 services associated with SessionFactoryServiceRegistry
1. EventListenerRegistry = publishing and subscribing the events
2. StatisticsImplementor = to track operations being carried as part of hibernate framework

These Services require other services as depends, so a service can express it depent Service either from parent registry or its own, but cannot use the Service that is there in child registry
------------------------------------------------------------------------------------------


















































































































	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
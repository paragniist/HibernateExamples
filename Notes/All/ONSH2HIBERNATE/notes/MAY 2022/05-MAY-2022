#4. native id generator
native id generator works based on the underlying database against which we are running our application. incase if we are running our application on mysql/mssqlserver database it behaves as identity generator and if we are running our application on oracle database it works as sequence id generator

<id name="customerNo" column="customer_no">
	<generator class="native"/>
</id>

#5. guid
the guid generator uses the database capabilities in generating the primary key value. there are databases which supports generating the primary key value which are unique within the world, for eg. oracle provided sys_guid() function which will be used by the guid generator for generating the id

<id name="customerNo" column="customer_no">
	<generator class="guid"/>
</id>

#6. uuid
works similar to guid but doesnt relies on db capabilities, rather hibernate id generator itself generates the unique hexadecimal string as primary key

<id name="customerNo" column="customer_no">
	<generator class="uuid"/>
</id>

#7. select
select is an id generator that is used in legacy applications. In a legacy application developers used to write triggers that takes care of generating id at the database level while performing insert operation.
	
Hibernate framework requires these ids generated by the triggers during the insert operation to manage the entity objects as part of the application. So inorder to fetch these ids generated by the triggers the select id generator is used

Let us consider a database table 
vehicle
-------
vehicle_no (pk) model_nm  manufacturer  reg_no  color  fuel_type  lease_amount

In the above table the vehicle_no is generated by the trigger during the time of inserting the data. To fetch the vehicle_no generated we need an candidate key in the table, here we can consider the candidate key as reg_no (unique)
	
Now specify the candidate_key (unique key) to the select generator, so that post completion of the insert operation, the select id generator queries the table with the candidate key value we used in performing insert operation and queries the record back and fetches the primary key

vehicle["creta 2022", "hyundai", "TS01BQ933", "black", "diesel", "3000"]
session.save(vehicle);


trigger:-
-----------	
	create or replace trigger vehicle_trigger
	before insert on vehicle
	for each row
	begin
		:NEW.vehicle_no:=sys_guid()
	end

<id name="vehicleNo" column="vehicle_no">
	<generator class="select">
		<param name="property">registrationNo</param>
	</generator>
</id>
-------------------------------------------------------------------------------------------
jpa id generators
-----------------
What are the id generators supported by jpa api?
The jpa api supports 4 types of id generators
1. AUTO
2. SEQUENCE
3. IDENTITY
4. TABLE

#1. AUTO
AUTO id generator works similar to native id generator in hibernate framework. it either works as identity generator while using mysql/mssqlserver database or as sequence generator while working with oracle database

#2. SEQUENCE
SEQUENCE id generator uses oracle sequences in generating the id

#3. IDENTITY
IDENTITY generator works for only the databases that supports identity/auto_increment column types like mysql/mssqlserver

#4. TABLE id generator
TABLE id generator works irrespective of the underlying database unlike SEQUENCE or IDENTITY generator
The TABLE id generator uses a database table to keep track the id numbers generated for an entity class/table and increments by 1 and returns the id for each persist/save operation of an entity object

Sequence Generator
-------------------
@Entity
@Table(name="bus")
@SequenceGenerator(name="busSequenceGenerator", sequenceName="bus_sequence", allocationSize=1)
class Bus implements Serializable {
	@Id
	@Column(name="bus_no")
	@GeneratedValue(strategy=GenerationStrategy.SEQUENCE, generator="busSequenceGenerator")
	int busNo;	
	@Column(name="bus_type")
	String busType;
	@Column(name="rta_registration_no")
	String rtaRegistrationNo;
	@Column(name="service_no")
	String serviceNo;
	int capacity;
	@Column(name="fuel_type")
	String fuelType;
	String color;
	// accessors
}

TableGenerator
---------------
@Entity
@Table(name="bus")
@TableGenerator(name="busTableGenerator", table="unique_keys", pkColumnName="pk_column_nm", pkColumnValue="pk_column_value", pkColumnNameValue="bus_no")
class Bus implements Serializable {
	@Id
	@Column(name="bus_no")
	@GeneratedValue(strategy=GenerationStrategy.TABLE, generator="busTableGenerator")
	int busNo;	
	@Column(name="bus_type")
	String busType;
	@Column(name="rta_registration_no")
	String rtaRegistrationNo;
	@Column(name="service_no")
	String serviceNo;
	int capacity;
	@Column(name="fuel_type")
	String fuelType;
	String color;
	// accessors
}










































#2. increment
increment id generator fetches the max/last generated primary key column value of a entity class corresponding database table and increments by 1 and returns as the id
The increment id generator will caches the max primary key for the first-time when invoked and subsequent calls will be incremented and returned from in-memory copy of the id, so that it works on multi-threaded environment as well and save performance

<id name="customerNo" column="customer_no">
	<generator class="increment"/>
</id>
notes:-
	1. works for only dataTypes of int,short and long
	2. works in multi-threaded environment
	3. not suitable to use in clustered environment
	

#3. identity
identity id generator works for database that supports auto_increment columns or identity columns.
mysql = auto increment
ms sql server = identity

In the case of identity generator,the database will generates the id/key column value with which the data will be persisted/saved into the database table, the role of identity generated is to fetch the primary key column value with which the record has been persisted and reflects in the entity class after persisting
	
<id name="customerNo" column="customer_no">
	<generator class="identity"/>
</id>

int customerNo = (int) session.save(customer);

notes:-
	1. works for dataTypes of int, short and long only
	2. works both in multi-threaded and clustered environments since the database itself is generating the id
	3. The only drawback is it works only on few databases that supports auto increment or identity column types
	
#4. sequence 
oracle database doesnt support identity or autoincrement columns, it supports only sequences.
sequence is an datastructure that generates the integer numbers sequentially, for each table we need to create an sequence. use the sequence to generate an integer number and use it as a primary key column value for inserting the data into the corresponding table

for eg for customer table we need to create an customer_sequence as below
oracle database:
	- customer_sequence
		start: 1
		ends: 9999999999
		increments: 1
			
when we wanted to insert the data into customer table, first fetch the sequence no from sequence we created as below.			
select customer_sequence.next_val from dual

using the customer_sequence generated number we need to insert the data into customer table
customer(customer_no (from sequence), customer_nm)
			
insert into customer(customer_no, customer_nm, dob, gender) values(customer_sequence.next_val, ?, ?, ?)			
In the above query we are invoking the customer_sequence aspart of the insert query itself with which the data will be persisted

instead of we invoking the sequence and passing the value as input for insert operation we can use sequence id generator

<id name="customerNo" column="customer_no">
	<generator class="sequence"/>
</id>

by default the sequence generator creates an default sequence called "hibernate_sequence" and will be used for generating the primary key while storing the data.
	
It is not recommended to use default sequence generated by the sequence generator as multiple entity classes might endup in using the same "hibernate_sequence" so that the ids will not sequential for an entity class
	
it is recommended to create our own sequence per each table, pass the sequence name as an input to sequence id generator asking to generate the key

<id name="customerNo" column="customer_no">
	<generator class="sequence">
		<param name="sequence">customer_sequence</param>
	</generator>
</id>
	

































































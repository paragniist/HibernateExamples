There are 3 command-line tools are there.
1. SchemaExport
2. SchemaUpdate
3. SchemaValidator

These are java classes, not the CLI. so to run these java classes we need to set the classpath pointing to all the hibernate jar files.
create an java project and add all the libraries to the project

d:\work:/>
hibtools
|-src
	|-com.hibtools.entities
		|-Ticket.java
		|-Ticket.hbm.xml
	|-hibernate.cfg.xml
|-lib
	|-antlr-2.7.7.jar
	|-dom4j-1.6.1.jar
	|-hibernate-commons-annotations-5.1.2.Final.jar
	|-hibernate-core-5.6.8.Final.jar
	|-jandex-2.4.2.Final.jar
	|-javassist-3.18.1-GA.jar
	|-jboss-logging-3.4.3.Final.jar
	|-jboss-logging-annotations-1.2.0.Beta1.jar
	|-jboss-transaction-api_1.2_spec-1.0.0.Final.jar
	|-mysql-connector-java-8.0.28.jar
	|-javax.persistence-api-2.2.jar
	|-byte-buddy-1.12.9.jar
	|-javax.activation-api-1.2.0:jar
|-setenv.bat

create 2 environment variables 
1. HIBTOOLS=pointing to the lib directory location of the project
2. HIBCP=pointing to all the jar files under the lib directory

set HIBTOOLS=D:\work\master\hibernate\20220111\hibtools\lib
set HIBCP=%HIBTOOLS%\antlr-2.7.7.jar;%HIBTOOLS%\dom4j-1.6.1.jar;%HIBTOOLS%\hibernate-commons-annotations-5.1.2.Final.jar;%HIBTOOLS%\hibernate-core-5.6.8.Final.jar;%HIBTOOLS%\jandex-2.4.2.Final.jar;%HIBTOOLS%\javassist-3.18.1-GA.jar;%HIBTOOLS%\jboss-logging-3.4.3.Final.jar;%HIBTOOLS%\jboss-logging-annotations-1.2.0.Beta1.jar;%HIBTOOLS%\jboss-transaction-api_1.2_spec-1.0.0.Final.jar;%HIBTOOLS%\mysql-connector-java-8.0.28.jar;%HIBTOOLS%\javax.persistence-api-2.2.jar;%HIBTOOLS%\byte-buddy-1.12.9.jar;%HIBTOOLS%\classmate-1.5.1.jar;%HIBTOOLS%\javax.activation-api-1.2.0.jar;%HIBTOOLS%\jaxb-api-2.3.1.jar;%HIBTOOLS%\jaxb-runtime-2.3.6.jar;%HIBTOOLS%\txw2-2.3.6.jar;%HIBTOOLS%\istack-commons-runtime-3.0.7.jar;%HIBTOOLS%\stax-ex-1.8.jar;%HIBTOOLS%\FastInfoset-1.2.15.jar;%HIBTOOLS%\protobuf-java-3.11.4.jar

In our project let us create an
1. entity class
2. mapping file
3. hibernate configuration file
then we can run the 3 tools to export the mappings into database tables.

#1. SchemaExport
SchemaExport tool does 2 jobs, it creates/export the schema and it even drops the existing schema
it takes the hibernate.cfg.xml as an input and exports/drops all the entity mappings we specified in the hibernate.cfg.xml

d:\work\hibtools:/>java -cp %HIBCP%;bin org.hibernate.tool.hbm2ddl.SchemaExport 
			--create 
			--drop
			--text
			--output=filename.sql
			--config hibernate.cfg.xml

--create = export the entity classes/mapping files specified in hibernate.cfg.xml into the database as tables
--drop = drops all the entityclasses specified in hibernate.cfg.xml from database
if we dont use --create or --drop it first drops the existing tables and recreates them
--text = indicates generate the create/drop sql scripts onto the console only
--output=filename.sql = along with printing the sql script onto the console it creates an filename.sql and places the sql script into that file

#2. SchemaUpdate
if we have an existing application in hibernate, for which already database tables are created. we have modified the entity classes and mapping files for few entities in our application.
so to make our application work with these changes we need to make corresponding changes in database tables as well. instead of manually doing these changes we can use SchemaUpdate tool
It goes to mapping files and pickup the corresponding tables identifies the delta and if any additional attributes are there in mapping for which columns are not there it creates those columns by running alter script on the tables so that the necessary changes are available in tables to run your application
note: schema update will not drop existing columns of the table, it only adds the columns

d:\work\hibtools:/>
java -cp %HIBTOOLS%;bin org.hibernate.tool.hbm2ddl.SchemaUpdate --config=hibernate.cfg.xml

--text = will generates the sql files but will not execute on the database
--output=filename.sql = will writes the sql output to a file

if the table corresponding to the entity class is not there it creates,
if already the table is there it will alters and adds columns if there any missing

#3. SchemaValidator
SchemaValidate tool verifies whether the mapping file and database tables are intact or not. is there any mis-match between mapping and tables.
we can quickly check the version of the code with the version of the tables to identify are we using right code against correct db or not before running the application using SchemaValidate tool
d:\work\hibtools:/>
java -cp %HIBCP%;bin org.hibernate.tool.hbm2ddl.SchemaValidator --config=hibernate.cfg.xml








































































































